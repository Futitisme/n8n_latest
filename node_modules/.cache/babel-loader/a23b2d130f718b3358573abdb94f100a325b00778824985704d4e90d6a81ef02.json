{"ast":null,"code":"const ASSISTANT_ID = \"asst_u8zmEXKQnJzGIssP4mcv6hf7\";\nconst OPENAI_API_KEY = \"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\";\nexport async function askAssistant(question, threadId) {\n  try {\n    const response = await fetch('/api/chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        question,\n        threadId,\n        assistantId: ASSISTANT_ID\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to get response from assistant');\n    }\n    return {\n      success: true,\n      message: data.message\n    };\n  } catch (error) {\n    console.error('Error asking assistant:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred'\n    };\n  }\n}\n\n// For development/testing purposes, you can create a simple mock function\nexport async function mockAskAssistant(question) {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return {\n    success: true,\n    message: `This is a mock response to: \"${question}\". In production, this would be replaced with the actual OpenAI API call.`\n  };\n}","map":{"version":3,"names":["ASSISTANT_ID","OPENAI_API_KEY","askAssistant","question","threadId","response","fetch","method","headers","body","JSON","stringify","assistantId","data","json","ok","Error","error","success","message","console","mockAskAssistant","Promise","resolve","setTimeout"],"sources":["/Users/lenavasilev/Desktop/n8n_assistant_v01/src/lib/openai.ts"],"sourcesContent":["const ASSISTANT_ID = \"asst_u8zmEXKQnJzGIssP4mcv6hf7\"\nconst OPENAI_API_KEY = \"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\"\n\nexport interface OpenAIResponse {\n  success: boolean\n  message?: string\n  error?: string\n}\n\nexport async function askAssistant(question: string, threadId?: string): Promise<OpenAIResponse> {\n  try {\n    const response = await fetch('/api/chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        question,\n        threadId,\n        assistantId: ASSISTANT_ID,\n      }),\n    })\n\n    const data = await response.json()\n    \n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to get response from assistant')\n    }\n\n    return {\n      success: true,\n      message: data.message,\n    }\n  } catch (error) {\n    console.error('Error asking assistant:', error)\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n    }\n  }\n}\n\n// For development/testing purposes, you can create a simple mock function\nexport async function mockAskAssistant(question: string): Promise<OpenAIResponse> {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000))\n  \n  return {\n    success: true,\n    message: `This is a mock response to: \"${question}\". In production, this would be replaced with the actual OpenAI API call.`,\n  }\n} "],"mappings":"AAAA,MAAMA,YAAY,GAAG,+BAA+B;AACpD,MAAMC,cAAc,GAAG,sKAAsK;AAQ7L,OAAO,eAAeC,YAAYA,CAACC,QAAgB,EAAEC,QAAiB,EAA2B;EAC/F,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,EAAE;MACxCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBR,QAAQ;QACRC,QAAQ;QACRQ,WAAW,EAAEZ;MACf,CAAC;IACH,CAAC,CAAC;IAEF,MAAMa,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,uCAAuC,CAAC;IACxE;IAEA,OAAO;MACLC,OAAO,EAAE,IAAI;MACbC,OAAO,EAAEN,IAAI,CAACM;IAChB,CAAC;EACH,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdG,OAAO,CAACH,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO;MACLC,OAAO,EAAE,KAAK;MACdD,KAAK,EAAEA,KAAK,YAAYD,KAAK,GAAGC,KAAK,CAACE,OAAO,GAAG;IAClD,CAAC;EACH;AACF;;AAEA;AACA,OAAO,eAAeE,gBAAgBA,CAAClB,QAAgB,EAA2B;EAChF;EACA,MAAM,IAAImB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;EAEvD,OAAO;IACLL,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE,gCAAgChB,QAAQ;EACnD,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}