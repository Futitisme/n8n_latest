{"ast":null,"code":"const ASSISTANT_ID=\"asst_u8zmEXKQnJzGIssP4mcv6hf7\";const OPENAI_API_KEY=\"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\";export async function askAssistant(question,threadId){try{const response=await fetch('/api/chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({question,threadId,assistantId:ASSISTANT_ID})});const data=await response.json();if(!response.ok){throw new Error(data.error||'Failed to get response from assistant');}return{success:true,message:data.message};}catch(error){console.error('Error asking assistant:',error);return{success:false,error:error instanceof Error?error.message:'Unknown error occurred'};}}// For development/testing purposes, you can create a simple mock function\nexport async function mockAskAssistant(question){// Simulate API delay\nawait new Promise(resolve=>setTimeout(resolve,1000));return{success:true,message:\"This is a mock response to: \\\"\".concat(question,\"\\\". In production, this would be replaced with the actual OpenAI API call.\")};}","map":{"version":3,"names":["ASSISTANT_ID","OPENAI_API_KEY","askAssistant","question","threadId","response","fetch","method","headers","body","JSON","stringify","assistantId","data","json","ok","Error","error","success","message","console","mockAskAssistant","Promise","resolve","setTimeout","concat"],"sources":["/Users/lenavasilev/Desktop/n8n_assistant_v01/src/lib/openai.ts"],"sourcesContent":["const ASSISTANT_ID = \"asst_u8zmEXKQnJzGIssP4mcv6hf7\"\nconst OPENAI_API_KEY = \"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\"\n\nexport interface OpenAIResponse {\n  success: boolean\n  message?: string\n  error?: string\n}\n\nexport async function askAssistant(question: string, threadId?: string): Promise<OpenAIResponse> {\n  try {\n    const response = await fetch('/api/chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        question,\n        threadId,\n        assistantId: ASSISTANT_ID,\n      }),\n    })\n\n    const data = await response.json()\n    \n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to get response from assistant')\n    }\n\n    return {\n      success: true,\n      message: data.message,\n    }\n  } catch (error) {\n    console.error('Error asking assistant:', error)\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n    }\n  }\n}\n\n// For development/testing purposes, you can create a simple mock function\nexport async function mockAskAssistant(question: string): Promise<OpenAIResponse> {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000))\n  \n  return {\n    success: true,\n    message: `This is a mock response to: \"${question}\". In production, this would be replaced with the actual OpenAI API call.`,\n  }\n} "],"mappings":"AAAA,KAAM,CAAAA,YAAY,CAAG,+BAA+B,CACpD,KAAM,CAAAC,cAAc,CAAG,sKAAsK,CAQ7L,MAAO,eAAe,CAAAC,YAAYA,CAACC,QAAgB,CAAEC,QAAiB,CAA2B,CAC/F,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,WAAW,CAAE,CACxCC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBR,QAAQ,CACRC,QAAQ,CACRQ,WAAW,CAAEZ,YACf,CAAC,CACH,CAAC,CAAC,CAEF,KAAM,CAAAa,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAElC,GAAI,CAACT,QAAQ,CAACU,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAACH,IAAI,CAACI,KAAK,EAAI,uCAAuC,CAAC,CACxE,CAEA,MAAO,CACLC,OAAO,CAAE,IAAI,CACbC,OAAO,CAAEN,IAAI,CAACM,OAChB,CAAC,CACH,CAAE,MAAOF,KAAK,CAAE,CACdG,OAAO,CAACH,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,MAAO,CACLC,OAAO,CAAE,KAAK,CACdD,KAAK,CAAEA,KAAK,WAAY,CAAAD,KAAK,CAAGC,KAAK,CAACE,OAAO,CAAG,wBAClD,CAAC,CACH,CACF,CAEA;AACA,MAAO,eAAe,CAAAE,gBAAgBA,CAAClB,QAAgB,CAA2B,CAChF;AACA,KAAM,IAAI,CAAAmB,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CAEvD,MAAO,CACLL,OAAO,CAAE,IAAI,CACbC,OAAO,kCAAAM,MAAA,CAAkCtB,QAAQ,8EACnD,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}